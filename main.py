import json
import re
from telegram import (
    Update, KeyboardButton, ReplyKeyboardMarkup, Contact
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
from config import BOT_TOKEN

USERS_FILE = "users.json"
ASK_AUTH_METHOD, RECEIVE_DATA = range(2)

# ========= –•—Ä–∞–Ω–∏–ª–∏—â–µ =========
def save_user(telegram_id, full_name, bin_number=None, phone_number=None):
    try:
        with open(USERS_FILE, "r") as f:
            users = json.load(f)
    except FileNotFoundError:
        users = {}

    users[str(telegram_id)] = {
        "name": full_name,
        "bin": bin_number,
        "phone": phone_number
    }

    with open(USERS_FILE, "w") as f:
        json.dump(users, f, indent=4)

def user_is_authenticated(telegram_id):
    try:
        with open(USERS_FILE, "r") as f:
            users = json.load(f)
            user = users.get(str(telegram_id))
            return user and (user.get("phone") or user.get("bin"))
    except FileNotFoundError:
        return False

def get_user_data(telegram_id):
    try:
        with open(USERS_FILE, "r") as f:
            users = json.load(f)
            return users.get(str(telegram_id))
    except FileNotFoundError:
        return None

# ========= –í–∞–ª–∏–¥–∞—Ü–∏—è =========
def is_valid_phone(phone: str) -> bool:
    return bool(re.fullmatch(r"\+77\d{9}", phone))

def is_valid_bin(bin_code: str) -> bool:
    return bool(re.fullmatch(r"\d{12}", bin_code))

# ========= –•–µ–Ω–¥–ª–µ—Ä—ã =========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    telegram_id = user.id
    full_name = user.full_name

    context.user_data["telegram_id"] = telegram_id
    context.user_data["full_name"] = full_name

    await update.message.reply_text(f"{full_name}, –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ë–∞–ª–∞–Ω—Å-1! üëã")

    if user_is_authenticated(telegram_id):
        await update.message.reply_text("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã ‚úÖ")
        return ConversationHandler.END

    reply_markup = ReplyKeyboardMarkup(
        [
            [KeyboardButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω", request_contact=True)],
            [KeyboardButton("üè¢ –ë–ò–ù")],
            [KeyboardButton("üìÑ –ú–æ–π —Å—Ç–∞—Ç—É—Å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await update.message.reply_text(
        "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
        reply_markup=reply_markup
    )
    return ASK_AUTH_METHOD

async def ask_for_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if message.contact:
        phone = message.contact.phone_number
        if not is_valid_phone(phone):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +77XXXXXXXXX.")
            return ASK_AUTH_METHOD
        save_user(context.user_data["telegram_id"], context.user_data["full_name"], phone_number=phone)
        await update.message.reply_text("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        return ConversationHandler.END

    elif message.text == "üè¢ –ë–ò–ù":
        context.user_data["auth_method"] = "bin"
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ë–ò–ù –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
        return RECEIVE_DATA

    elif message.text == "üìû –¢–µ–ª–µ—Ñ–æ–Ω":
        context.user_data["auth_method"] = "phone"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +77XXXXXXXXX:")
        return RECEIVE_DATA

    elif message.text == "üìÑ –ú–æ–π —Å—Ç–∞—Ç—É—Å":
        user_data = get_user_data(context.user_data["telegram_id"])
        if not user_data:
            await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")
            return ASK_AUTH_METHOD
        bin_info = user_data.get("bin") or "‚Äî"
        phone_info = user_data.get("phone") or "‚Äî"
        await update.message.reply_text(
            f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {user_data['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone_info}\n–ë–ò–ù: {bin_info}"
        )
        return ASK_AUTH_METHOD

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¢–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ë–ò–ù.")
        return ASK_AUTH_METHOD

async def receive_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    telegram_id = context.user_data["telegram_id"]
    full_name = context.user_data["full_name"]
    auth_method = context.user_data["auth_method"]

    if auth_method == "phone":
        if not is_valid_phone(user_input):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ +77XXXXXXXXX:")
            return RECEIVE_DATA
        save_user(telegram_id, full_name, phone_number=user_input)

    elif auth_method == "bin":
        if not is_valid_bin(user_input):
            await update.message.reply_text("‚ùå –ë–ò–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 12 —Ü–∏—Ñ—Ä.")
            return RECEIVE_DATA
        save_user(telegram_id, full_name, bin_number=user_input)

    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# ========= –ó–∞–ø—É—Å–∫ =========
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_AUTH_METHOD: [MessageHandler(filters.ALL & ~filters.COMMAND, ask_for_input)],
            RECEIVE_DATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_data)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()