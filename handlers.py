from admin import notify_admins
from telegram import (
    Update, KeyboardButton, ReplyKeyboardMarkup
)
from telegram.ext import (
    ContextTypes, ConversationHandler
)
from validation import is_valid_phone, is_valid_bin
from storage import (
    save_user, get_user_data,
    remove_user, user_is_authenticated
)
from states import ASK_AUTH_METHOD, RECEIVE_DATA

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    telegram_id = user.id
    full_name = user.full_name

    context.user_data["telegram_id"] = telegram_id
    context.user_data["full_name"] = full_name

    await update.message.reply_text(f"{full_name}, –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ë–∞–ª–∞–Ω—Å-1! üëã")

    reply_markup = ReplyKeyboardMarkup(
        [
            [KeyboardButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω")],
            [KeyboardButton("üè¢ –ë–ò–ù")],
            [KeyboardButton("üìÑ –ú–æ–π —Å—Ç–∞—Ç—É—Å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    if user_is_authenticated(telegram_id):
        await update.message.reply_text("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã ‚úÖ\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥.", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", reply_markup=reply_markup)

    await update.message.reply_text(
        "‚ÑπÔ∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/status ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é",
        parse_mode="Markdown"
    )
    return ASK_AUTH_METHOD

async def ask_for_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    telegram_id = context.user_data.get("telegram_id") or message.from_user.id

    if message.text == "üìû –¢–µ–ª–µ—Ñ–æ–Ω":
        context.user_data["auth_method"] = "phone_choice"

        reply_markup = ReplyKeyboardMarkup(
            [
                [KeyboardButton("üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)],
                [KeyboardButton("‚úç –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.reply_text("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏–∑ Telegram –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é?", reply_markup=reply_markup)
        return ASK_AUTH_METHOD

    elif message.contact:
        phone = message.contact.phone_number
        full_name = message.from_user.full_name

        if not is_valid_phone(phone):
            await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +77XXXXXXXXX.")
            return ASK_AUTH_METHOD

        save_user(telegram_id, full_name, phone_number=phone)
        await notify_admins(context, full_name, telegram_id, phone=phone)
        await message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        await message.reply_text("‚ÑπÔ∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n/status ‚Äî —Å—Ç–∞—Ç—É—Å\n/reset ‚Äî —Å–±—Ä–æ—Å", parse_mode="Markdown")
        return ConversationHandler.END

    elif message.text == "‚úç –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
        context.user_data["auth_method"] = "phone"
        await message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +77XXXXXXXXX:")
        return RECEIVE_DATA

    elif message.text == "üè¢ –ë–ò–ù":
        context.user_data["auth_method"] = "bin"
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ë–ò–ù –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
        return RECEIVE_DATA

    elif message.text == "üìÑ –ú–æ–π —Å—Ç–∞—Ç—É—Å":
        user_data = get_user_data(telegram_id)
        if not user_data or (not user_data.get("phone") and not user_data.get("bin")):
            await message.reply_text("–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        else:
            bin_info = user_data.get("bin") or "‚Äî"
            phone_info = user_data.get("phone") or "‚Äî"
            await message.reply_text(f"üë§ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n–ò–º—è: {user_data['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone_info}\n–ë–ò–ù: {bin_info}")
        return ASK_AUTH_METHOD

    else:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return ASK_AUTH_METHOD

async def receive_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    telegram_id = context.user_data["telegram_id"]
    full_name = context.user_data["full_name"]
    auth_method = context.user_data["auth_method"]

    if auth_method == "phone":
        if not is_valid_phone(user_input):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ +77XXXXXXXXX:")
            return RECEIVE_DATA
        save_user(telegram_id, full_name, phone_number=user_input)
        await notify_admins(context, full_name, telegram_id, phone=user_input)

    elif auth_method == "bin":
        if not is_valid_bin(user_input):
            await update.message.reply_text("‚ùå –ë–ò–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 12 —Ü–∏—Ñ—Ä.")
            return RECEIVE_DATA
        save_user(telegram_id, full_name, bin_number=user_input)
        await notify_admins(context, full_name, telegram_id, bin_code=user_input)

    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
    await update.message.reply_text("‚ÑπÔ∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n/status ‚Äî —Å—Ç–∞—Ç—É—Å\n/reset ‚Äî —Å–±—Ä–æ—Å", parse_mode="Markdown")
    return ConversationHandler.END

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    user_data = get_user_data(telegram_id)

    if not user_data or (not user_data.get("phone") and not user_data.get("bin")):
        await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
    else:
        bin_info = user_data.get("bin") or "‚Äî"
        phone_info = user_data.get("phone") or "‚Äî"
        await update.message.reply_text(
            f"üë§ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n–ò–º—è: {user_data['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone_info}\n–ë–ò–ù: {bin_info}"
        )

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    if remove_user(telegram_id):
        await update.message.reply_text("üîÅ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END